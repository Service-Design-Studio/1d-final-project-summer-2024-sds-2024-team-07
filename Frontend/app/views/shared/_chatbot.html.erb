<div id="chatbot-icon" class="draggable">
    <%= image_tag 'faq.svg', alt: "Chatbot Icon", style:"width: 30px;" %>
</div>
<div id="chatbot-window" class="hidden">
    <div id="chatbot-header">DBS DocCheck FAQ</div>
    <div id="chatbot-body">
        <div id="messages"></div>
        <form id="chatbot-form">
            <input type="text" id="chatbot-input" placeholder="Type your message here..." required>
            <%= image_tag 'send.svg', alt: "Send", id: "send-button", style:"width: 30px; cursor: pointer;" %>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const chatbotIcon = document.getElementById('chatbot-icon');
        const chatbotWindow = document.getElementById('chatbot-window');
        const chatbotForm = document.getElementById('chatbot-form');
        const chatbotInput = document.getElementById('chatbot-input');
        const messagesDiv = document.getElementById('messages');
        const sendButton = document.getElementById('send-button');
        let isRequestPending = false; // Flag to track pending requests

        function positionChatbotWindow() {
            const iconRect = chatbotIcon.getBoundingClientRect();
            const windowWidth = chatbotWindow.offsetWidth;
            const windowHeight = chatbotWindow.offsetHeight;
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            const isLeftHalf = (iconRect.left + (chatbotIcon.offsetWidth / 2)) < (viewportWidth / 2);
            let leftPosition = isLeftHalf ? iconRect.right : iconRect.left - windowWidth;
            let topPosition = iconRect.top;
            leftPosition = Math.max(0, Math.min(viewportWidth - windowWidth, leftPosition));
            topPosition = Math.max(0, Math.min(viewportHeight - windowHeight, topPosition));
            chatbotWindow.style.left = `${leftPosition}px`;
            chatbotWindow.style.top = `${topPosition}px`;
        }

        chatbotIcon.addEventListener('click', () => {
            chatbotWindow.style.display = chatbotWindow.style.display === 'none' ? 'block' : 'none';
            positionChatbotWindow();
            initializeChatbot();
        });

        let isDraggingIcon = false;
        let offsetX, offsetY;

        document.addEventListener('mousemove', (e) => {
            if (isDraggingIcon) {
                const newLeft = e.clientX - offsetX;
                const newTop = e.clientY - offsetY;
                const minLeft = 0;
                const maxLeft = window.innerWidth - chatbotIcon.offsetWidth;
                const minTop = 0;
                const maxTop = window.innerHeight - chatbotIcon.offsetHeight;
                chatbotIcon.style.left = `${Math.max(minLeft, Math.min(maxLeft, newLeft))}px`;
                chatbotIcon.style.top = `${Math.max(minTop, Math.min(maxTop, newTop))}px`;
                positionChatbotWindow();
            }
        });

        document.addEventListener('mouseup', () => {
            isDraggingIcon = false;
        });

        chatbotIcon.addEventListener('mousedown', (e) => {
            isDraggingIcon = true;
            offsetX = e.clientX - chatbotIcon.getBoundingClientRect().left;
            offsetY = e.clientY - chatbotIcon.getBoundingClientRect().top;
        });

        chatbotIcon.addEventListener('mouseup', () => {
            isDraggingIcon = false;
        });

        chatbotInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendMessage();
            }
        });

        sendButton.addEventListener('click', (e) => {
            e.preventDefault();
            sendMessage();
        });


        function initializeChatbot() {
            if (messagesDiv.childElementCount === 0) {
                const botMessageDiv = document.createElement('div');
                botMessageDiv.classList.add('message', 'bot');
                botMessageDiv.innerHTML = `
                    <span class="sender">Bot</span>
                    <div class="bubble">
                        Hello <span class="wave">ðŸ‘‹</span> ! How can I help you today?<br><br>Here are some common questions:
                        <div class="common-questions">
                            <button class="common-question">What Required Documents for Foreigners who are salaried employees who have been employed for more than 3 months?</button>
                            <button class="common-question">What is the eligibility criteria for a DBS credit card?</button>
                            <button class="common-question">How can I update my address in DBS records?</button>
                        </div>
                    </div>
                `;
                messagesDiv.appendChild(botMessageDiv);

                document.querySelectorAll('.common-question').forEach(button => {
                    button.addEventListener('click', handleCommonQuestionClick);
                });

                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            }
        }

        function handleCommonQuestionClick(event) {
            const question = event.target.textContent;
            chatbotInput.value = question;
            sendMessage();
        }

        function convertMarkdownToHTML(text) {
            let html = text
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/`(.*?)`/g, '<code>$1</code>')
                .replace(/\n/g, '<br>');
            return html;
        }

        async function sendMessage() {
            if (isRequestPending) return; // Prevent sending another message if a request is pending

            const userInput = chatbotInput.value.trim();
            if (userInput === '') return;

            const userMessageDiv = document.createElement('div');
            userMessageDiv.classList.add('message', 'you');
            userMessageDiv.innerHTML = `<span class="sender">You</span><div class="bubble you">${userInput}</div>`;
            messagesDiv.appendChild(userMessageDiv);

            chatbotInput.value = '';
            isRequestPending = true; // Set flag to indicate request is pending

            try {
                const response = await fetch('https://flask-app-44nyvt7saq-de.a.run.app/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query: userInput })
                });
                const data = await response.json();

                const botMessageDiv = document.createElement('div');
                botMessageDiv.classList.add('message', 'bot');
                botMessageDiv.innerHTML = `<span class="sender">Bot</span><div class="bubble">${data.answer}</div>`;
                messagesDiv.appendChild(botMessageDiv);

                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            } catch (error) {
                console.error('Error:', error);
                const errorMessageDiv = document.createElement('div');
                errorMessageDiv.classList.add('message', 'bot');
                errorMessageDiv.innerHTML = `<span class="sender">Error</span><div class="bubble">Could not get a response from the server.</div>`;
                messagesDiv.appendChild(errorMessageDiv);

                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            } finally {
                isRequestPending = false; // Reset flag after request completes
            }
        }
    });
</script>